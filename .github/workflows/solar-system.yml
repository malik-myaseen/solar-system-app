name: Solar Systemss workflow

on:
    workflow_dispatch: 
    push: 
        branches: 
            - main
            - 'feature/*'
            - workflow_dispatch
 
env:
    MONGO_URI: ${{ vars.MONGO_URI }}
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}            

jobs:
    unit-testing:
        name: unit testing
        strategy:
          matrix:
            nodejs_version: [18, 20]
            operation_systems: [ubuntu-latest]
            exclude:
                - nodejs_version: 18
                  operation_systems: macos-latest
        runs-on: ${{ matrix.operation_systems }}
        steps:
            - name: Checkout Repositories
              uses: actions/checkout@v4

            - name: Checkout NodeJS version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodejs_version }}
            
            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
            
            - name: install dependancies
              run: npm install 
              

            - name: Unit Testing
              run: npm test
                
            - name: Archive Test Results
              if: always()
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repositery
              uses: actions/checkout@v4

            - name: Check NodeJS version - 18
              uses: actions/setup-node@v3
              with:
                node-version: 18

            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}

            - name: Install dependencies
              run: npm install
              
            - name: Checkk code coverage
              continue-on-error: true
              run: npm run coverage

            - name: Archive test result
              uses: actions/upload-artifact@v3
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5

    Docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
            packages: write
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
              
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: GHCR Login 
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Build for testing
              uses: docker/build-push-action@v6
              with:
                context: .
                push: false 
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system-app:${{ github.sha }}  #it will use commit github commit id over here as tag

            - name: Docker Image Test
              run: |
                docker images
                docker run --name solar-system-app -d \
                    -p 3000:3000 \
                    -e MONGO_URI=${{ vars.MONGO_URI }} \
                    -e MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                    -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                    ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
    
                    export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                    echo "Container IP: $IP"

                    echo "Testing Image URL using wget"
                    wget -q -O - 127.0.0.1:3000/live | grep live


            - name: Build and Push Container Registry
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: |

                  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                  ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
        needs: Docker
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repo
            uses: actions/checkout@v4

          - name: Install Kubectl CLI
            uses: azure/setup-kubectl@v4
            with:
                version: 'v1.29.7' 

          - name: Set Kubeconfig file
            uses: azure/k8s-set-context@v4
            with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBECONFIG }}

          - name: Fetch Kubernetes cluster details
            run: | 
              kubectl version 
              echo ----------------------
              kubectl get nodes     
        
          - name: Save Nginx IP as Github Environment variable 
            run: | #geting ingress ip,  declearing and passing the value of ingressip to github environment variable 
              echo "INGRESS_IP=$(kubectl -n default get services my-release-nginx-ingress-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

          - name: Replace the Token in Menifest file
            uses: cschleiden/replace-tokens@v1
            with:
                tokenPrefix: '${'
                tokenSuffix: '}'
                files: '["kubernetes/development/*.yaml"]'
            env:
              NAMESPACE: ${{ vars.NAMESPACE }}
              REPLICAS: ${{ vars.REPLICAS }}
              IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              INGRESS_IP: ${{ env.INGRESS_IP }}

          - name: Check file
            run: | 
              cat kubernetes/development/*.yaml

#  provide namespace where i want to create secrets in cluster, mongo-db-creds is name of create in deploment.yaml file
          - name: Create Mongo DB Secrets
            run: |
                kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
                --from-literal=MONGO_URI=${{ vars.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -   
      


    #deploy the application
          - name: Deploy to Dev Env
            run: |
              kubectl apply -f kubernetes/development  

    #when we deploy the app it fail becz we dont config the mongo db screates which we mentioned in the deployment.yaml file
    #so we need to secrets of mongo db in the cluster first then it will deploy 

